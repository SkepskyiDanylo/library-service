services:
  web:
    build:
      context: .
    env_file:
      - .env
    ports:
      - "8001:8000"
    volumes:
      - my_media:/media
    command: >
      sh -c "
        python manage.py wait_for_db &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "
    depends_on:
      - db

  db:
    image: postgres:16.0-alpine3.17
    restart: always
    env_file:
      - .env
    volumes:
      - my_db:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    command: "celery -A library_service worker --loglevel=info"
    depends_on:
      - redis
      - db
      - web
    restart: on-failure

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    command: "celery -A library_service beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - redis
      - db
      - web
    restart: on-failure

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    command: "celery -A library_service flower --address=0.0.0.0"
    depends_on:
      - redis
      - celery
    env_file:
      - .env


volumes:
  my_db:
  my_media:
